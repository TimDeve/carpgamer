(load "src/models.carp")

(use Array)

(sig get-y-collision (Fn [(Ref Player) (Ref Block)] Int))
(defn get-y-collision [player block]
 (let [py @(Player.y-pos player) by @(Block.y-pos block) bh @(Block.h block)]
  (if (< py by)
    by
    (if (> py (+ bh by))
      (+ bh by)
      py))))

(sig get-x-collision (Fn [(Ref Player) (Ref Block)] Int))
(defn get-x-collision [player block]
 (let [px @(Player.x-pos player) bx @(Block.x-pos block) bw @(Block.w block)]
  (if (< px bx)
    bx
    (if (> px (+ bw bx))
      (+ bw bx)
      px))))

(sig player-colliding-with-block? (Fn [(Ref Player) (Ref Block)] Bool))
(defn player-colliding-with-block? [player block]
  (let [dist-x (- @(Player.x-pos player) (get-x-collision player block))
        dist-y (- @(Player.y-pos player) (get-y-collision player block))
        distance (Float.sqrt (Float.from-int (+ (* dist-x dist-x) (* dist-y dist-y))))]
   (<= distance (Float.from-int player-radius))))

; Had to comment out the sig because the compiler complains about the lambda
;(sig players-colliding-with-block? (Fn [(Ref Player) (Ref (Array Block))] Bool))
(defn player-colliding-with-blocks? [player blocks]
 (any?
    &(fn [block]
      (player-colliding-with-block? player block))
    blocks))

